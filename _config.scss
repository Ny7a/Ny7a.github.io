$primary-color: #444;
//$secondary-color: rgb(109, 109, 206);
$secondary-color: orange;
$show-home-image: true; //if show image= true show the background
$home-image: url(../img/background.jpg);
$background-opacity: 0.5;

@mixin ease0ut {
  // this is a function
  transition: all 0.5s ease-out;
}

@mixin background {
  @if $show-home-image {
    //if the image is enabled. (sass)
    &#bg-img {
      //bg-img is the body's id. (index.html file)
      background: $home-image; // sets the background to the home image.
      background-attachment: fixed;
      background-size: cover; // 'cover' will cover the entire space
      // an
      &:after {
        content: "";
        position: absolute; //'absolute' overlay covers the whole entire body
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background: rgba($primary-color, $background-opacity);
      }
    }
  }
}

// if you want to return anything it has to be a function not a @mixin
//set the text color
@function set-text-color($color) {
  // whatever color is passed in (set-text-color)
  @if (lightness($color) >40) {
    // if the lightness is greater than forty
    @return #000; // return black text
  } @else {
    // else return white text
    @return #fff;
  }
}

// media query mixins
@mixin mediaSm {
  @media screen and (max-width: 500px) {
    // this is a media query; any css inside of here will only apply if the  screen is 500px or less
    @content; // anything stored inside the mediaSm mixin will automatically be stored within @content
  }
}
// screens 768px and under
@mixin mediaMd {
  @media screen and (max-width: 768px) {
    // this is a media query; any css inside of here will only apply to the px's stated or less
    @content;
  }
}

@mixin mediaLg {
  @media screen and (min-width: 769px) and (max-width: 1170px) {
    @content;
  }
}

@mixin mediaXl {
  @media screen and (min-width: 1171px) {
    @content;
  }
}
